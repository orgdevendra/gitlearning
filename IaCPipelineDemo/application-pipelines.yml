# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'e530330c-1e61-4239-a492-4115070505bc'

  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/IaCPipelineDemo/IaCPipelineDemo'


stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: DeployDev
  displayName: Deploy to dev
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: DevEnv
    pool:
      vmImage: $(vmImageName)
    variables:
      - group: DevGroup

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: iacdemo-$(Environment)-function-app
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              appSettings: '-Environment $(Environment)'
- stage: DeployTest
  displayName: Deploy to test

  jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: TestEnv
      pool:
        vmImage: $(vmImageName)
      variables:
      - group: TestGroup

      strategy:
        runOnce:
          deploy:

            steps:
            - task: AzureFunctionApp@1
              displayName: 'Azure functions app deploy'
              inputs:
                azureSubscription: '$(azureSubscription)'
                appType: functionApp
                appName: iacdemo-$(Environment)-function-app
                package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                appSettings: '-Environment $(Environment)'